{"version":3,"sources":["serviceWorker.js","components/card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundaries.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundaries","state","hasError","error","info","this","setState","Component","App","onSearchBox","event","SearchField","target","value","fetch","then","response","json","users","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCESC,G,MAjBH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAErB,OACI,yBAAKC,UAAU,uDAEX,yBAAKC,IAAI,SAASC,IAAG,gCAA4BH,EAA5B,mBACrB,6BACA,4BAAKF,GACL,2BAAIC,OCODK,EAhBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEnB,OACA,6BAEKA,EAAOC,KAAI,SAACC,EAAMC,GACnB,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAKK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCUrEW,EAhBG,YAClB,EADoBA,UACnB,IAD6BC,EAC9B,EAD8BA,aAE9B,OAEI,yBAAKV,UAAU,QAEf,2BAAOA,UAAW,mCACXW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCENI,G,MAXD,SAACC,GAEX,OACJ,yBAAKC,MAAQ,CAACC,SAAS,SAAUC,OAAO,YAAYC,OAAO,UAC1DJ,EAAMK,YCiBQC,E,kDAlBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAS,GAHC,E,8DAMAC,EAAMC,GAChBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAG5B,OAAGG,KAAKJ,MAAMC,SACF,0CAGAG,KAAKX,MAAMK,a,GAhBDQ,aCyDfC,E,kDApDX,aAAc,IAAD,8BACT,gBAcJC,YAAY,SAACC,GACL,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAd5C,EAAKZ,MAAM,CACPlB,OAAO,GACP4B,YAAY,IAJP,E,gEAQO,IAAD,OAEfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACvB,OAAOmC,S,+BAO/B,IAAD,EACwBb,KAAKJ,MAA1BlB,EADH,EACGA,OAAO4B,EADV,EACUA,YACRQ,EAAOd,KAAKJ,MAAMlB,OAAOoC,QAAO,SAAAC,GAClC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASX,EAAYU,kBAKtD,OAAQtC,EAAOwC,OAOlB,yBAAK5C,UAAU,MACX,wBAAIA,UAAW,MAAf,eACA,kBAAC,EAAD,CAAYU,aAAcgB,KAAKI,cAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,OAX3B,8C,GA7BOZ,aCAlBiB,IAASC,OACP,6BACF,kBAAC,EAAD,OAKEC,SAASC,eAAe,SPqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.37c2e4b4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card =({name,email,id})=>{\r\n  \r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        \r\n            <img alt='photo3' src= {` https://robohash.org/${id}?size=200x200`}  />\r\n            <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n\r\n            </div>\r\n        \r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Card;    ","import React from 'react';\r\nimport Card from './card.js';\r\nconst CardList = ({robots}) =>{\r\n\r\nreturn(\r\n<div>\r\n    \r\n    {robots.map((user, i) =>{\r\n    return( <Card key={i} id= {robots[i].id} name={robots[i].name} email={robots[i].email}/>);\r\n    \r\n})\r\n}\r\n\r\n</div>\r\n\r\n);\r\n    \r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({SearchBox,searchChange})=>\r\n{\r\nreturn (\r\n\r\n    <div className=' pa2'>\r\n\r\n    <input className ='pa3 ba b--green bg-lightest-blue' \r\n           type='search' \r\n           placeholder='search robots'  \r\n           onChange={searchChange}/>\r\n   \r\n    </div>\r\n\r\n);\r\n\r\n} \r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\r\n    return(\r\n<div style ={{overflow:'scroll' ,border:'1px black',height:'800px'}}>\r\n{props.children}\r\n\r\n</div>\r\n\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\n\r\nclass ErrorBoundaries extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n            this.setState({hasError:true})\r\n    } \r\n    render(){\r\n        if(this.state.hasError){\r\n            return  <h1>Oops error</h1>\r\n              }\r\n       \r\n             return this.props.children;\r\n    }\r\n\r\n}\r\nexport default ErrorBoundaries;","import React,{Component} from 'react'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css';\r\nimport Scroll from '../components/scroll.js';\r\nimport ErrorBoundaries from '../components/ErrorBoundaries.js';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robots:[],\r\n            SearchField:''\r\n        }\r\n\r\n    }\r\n    componentDidMount(){\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users =>this.setState({robots:users}));\r\n    \r\n    }\r\n    onSearchBox=(event)=>{\r\n            this.setState({SearchField:event.target.value})\r\n           \r\n    }    \r\n    render(){\r\n        const {robots,SearchField}= this.state;\r\n        const filter=this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(SearchField.toLowerCase());\r\n              })\r\n                  \r\n\r\n\r\n           return !robots.length ? \r\n           <h1>Loading...</h1>\r\n           :\r\n           (\r\n            \r\n         \r\n\r\n        <div className='tc'>\r\n            <h1 className ='f1'>RoboFriends</h1>\r\n            <SearchBox  searchChange={this.onSearchBox}/>\r\n            <Scroll>\r\n                <ErrorBoundaries>\r\n                    <CardList robots={filter}/>\r\n                 </ErrorBoundaries>\r\n            </Scroll>\r\n        </div>\r\n        );\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(\n  <div>\n<App />\n\n</div>\n\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}